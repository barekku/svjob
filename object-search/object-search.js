"use strict";Polymer({is:"object-search",properties:{appService:{type:Element,value:function(){return document.querySelector("#appService")}},multiSelect:{type:Boolean,value:function(){var t=this.getAttribute("multi");return null!==t&&"false"!=t.toLowerCase()}},prototypes:Array,prototypesShow:Array,prototypesNum:{type:Number,value:0},objects:Array,objectsShow:{type:Array,observer:"_selectObjectStatus"},objectsNum:{type:Number,value:0},searchString:String,selectPattern:String,parameters:Array,loadsCount:{type:Number,value:12},loading:{type:Boolean,value:!1},isSelected:{type:Boolean,value:!1},switcher:Array,storager:Element},attached:function(){console.log("multi",this.multiSelect)},_selectPatternStatus:function(){this.$.patternsSearchList.querySelectorAll(".selected")},_selectObjectStatus:function(){this.$.objectsSearchList.querySelectorAll("paper-button")},_checkSwitch:function(){0==this.prototypesNum?this.switcher[0].disabled=!0:this.switcher[0].disabled=!1,0==this.objectsNum?this.switcher[2].disabled=!0:this.switcher[2].disabled=!1,void 0!==this.prototypes&&this.prototypes.length<10?this.switcher[1].disabled=!0:this.switcher[1].disabled=!1,void 0!==this.objects&&this.objects.length<10?this.switcher[3].disabled=!0:this.switcher[3].disabled=!1},openSearchDialog:function(){this.$.searchDialog.open(),this.switcher=Polymer.dom(this.root).querySelectorAll(".move-search-items paper-icon-button"),this.prototypeSearch()},switchPatternUp:function(){this.prototypesNum--,this.prototypeSearch()},switchPatternDown:function(){this.prototypesNum++,this.prototypeSearch()},switchObjectsUp:function(){this.objectsNum--,this.objectsGetBase()},switchObjectsDown:function(){this.objectsNum++,this.objectsGetBase()},load:function(t,e){this.loading=!0,this.appService.sendAjax(t,{owner:this,func:e},"Loaded")},receivedPatterns:function(t){this.loading=!1,this.prototypes=t.result.cursor.firstBatch,this.prototypesShow=this.prototypes,this._checkSwitch(),this.objectsGetBase()},receivedObjects:function(t){console.log(t),this.loading=!1,this.objects=t.result.cursor.firstBatch,this.objectsShow=this.objects,this._checkSwitch()},selectPrototype:function(t){t.target.classList.toggle("selected"),this.getParameters(),this.objectsGetBase()},getParameters:function(){var t=this.$.patternsSearchList.querySelectorAll(".selected");if(t.length>0){for(var e=Object.assign({},t[0].dataHost.item.schema.properties,!0),s=t.length;s-- >0;){var o=t[s].dataHost.item.schema.properties;for(var i in e)void 0!==o[i]?o[i].type!=e[i].type&&delete e[i]:delete e[i]}var r=[];for(var a in e)r.push(a);this.parameters=r,this.isSelected=!0}else this.parameters=[],this.isSelected=!1},_search:function(t,e){for(var s=[],o="o"==e?this.objects:this.prototypes,i=new RegExp(t,"i"),r=0;r<o.length;r++)i.test(o[r].meta.name)&&s.push(o[r]);"o"==e?this.objectsShow=s:this.prototypesShow=s},patternSearch:function(t){this.prototypesNum=0,this.prototypeSearch(t.target.value)},objectSearch:function(t){this.objectsNum=0,this.objectsGetBase(t.target.value)},paramsSearch:function(){},prototypeSearch:function(){var t=this.$.patternSearchField.value,e={method:"rc.find",params:{cmdName_value:"patterns",projection:{additional:0},skip:this.prototypesNum*this.loadsCount,limit:this.loadsCount}};t&&(e.params.filter={"meta.name":{$regex:t,$options:"im"}}),this.load(e,"receivedPatterns")},openObjects:function(t){var e=this._toggle(t);e&&void 0===this.objects&&this.objectsGetBase()},objectsGetBase:function(){var t=this.$.objectSearchField.value,e=this.$.patternsSearchList.querySelectorAll(".selected"),s=[],o=[];if(e.forEach(function(t){s.push(t.dataHost.item._id)}),void 0!==this.$.expandParamsSearch){var i=this.$.expandParamsSearch.querySelectorAll(".search-object-params");i.forEach(function(t){if(""!=t.value){var e={};e.key=t.label,e.value=t.value,o.push(e)}})}var r={method:"rc.find",params:{cmdName_value:"objects",filter:{"meta.non_system":!1},projection:{_id:1,meta:1},skip:this.objectsNum*this.loadsCount,limit:this.loadsCount}};if(t&&(r.params.filter["meta.name"]={$regex:t,$options:"im"}),s.length>0&&(r.params.filter["meta.pattern"]={$in:s}),o.length>0)for(var a=o.length;a-- >0;)r.params.filter["object."+o[a].key]={$regex:o[a].value,$options:"im"};console.log(r),this.load(r,"receivedObjects")},selectObject:function(t){console.log("selectObject");var e=t.target.dataHost.item,s={name:"selectObject",data:e};this.multiSelect?(t.target.classList.contains("selected")?this.fire("unselectobject",s):this.fire("selectobject",s),t.target.classList.toggle("selected")):(this.$.searchDialog.close(),this.fire("selectobject",s))},isPrototypeSelected:function(){return!(this.$.patternsSearchList.querySelectorAll(".selected").length>0)},_toggle:function(t){var e=Polymer.dom(t).localTarget.parentNode,s=Polymer.dom(e).parentNode.querySelector("iron-collapse");return s.toggle(),s.opened},getEventItemId:function(t){return t.model.item._id.$oid}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
