"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Polymer({is:"compare-page",properties:{appService:{type:Element,value:function(){return document.querySelector("#appService")}},aggparams:Array,oarray:{type:Array,notify:!0},objects:{type:Object,value:function(){var t=0,e={};return{add:function(o){console.log(o);var r=o._id.$oid;e[r]=Object.assign({},o,!0),t++},del:function(o){console.log(o);var r=o.$oid;console.log(e,"O!"),delete e[r],console.log(e,"O!"),t--},list:function(){console.log(e,t)},get:function(){var t=[];for(var o in e)t.push(e[o]);return t}}}},moveItem:Element,overItem:Element},attached:function(){document.addEventListener("scroll",this.containerScroll)},_arrChanged:function(){console.log(this.$.titleCol.querySelectorAll(".columnTitle"),"observer")},selObj:function(t,e){console.log(e,"data");var o={method:"rc.find",params:{cmdName_value:"objects",filter:{_id:e.data._id}}};this.appService.sendAjax(o,{owner:this,func:"getObject"},"Loaded")},unselObj:function(t,e){console.log("unsel"),this.objects.del(e.data._id),this.getOArray()},_closeSearch:function(){var t=document.querySelector("compare-page::shadow .columns");if(t.clientWidth<t.scrollWidth){var e=document.querySelector("compare-page::shadow #colcontscroll");e.querySelector("div").style.width=t.scrollWidth+"px";var o=t.querySelector(".ipTitle");console.log(t,"cl");var r=e.offsetHeight-e.clientHeight;e.style.top=o.clientHeight-r+"px",e.style.display="block"}},objRemove:function(t){var e=t.target.parentNode.parentNode,o=e.dataArg,r=this.oarray;r.splice(o,1),console.log(r),this.oarray=[],this.oarray=r},getObject:function(t){console.log(t,"find"),console.log(t.result.cursor.firstBatch[0]),this.objects.add(t.result.cursor.firstBatch[0]),this.getOArray()},getOArray:function(){this.oarray=this.objects.get(),this.getAggParams(),this.$.colcontscrolld.style.width=202*this.oarray.length+"px"},getAggParams:function(){var t=this.oarray,e=[];if(t.length>0){for(var o=t[0].object,r=t.length;r-- >1;)for(var a in o)void 0===t[r].object[a]&&delete o[a];for(var n in o)e.push(n)}this.aggparams=e},getParam:function(t,e){var o=""!=t[e]?t[e]:"не задано";if(Array.isArray(o)&&(o="Array"),"object"==("undefined"==typeof o?"undefined":_typeof(o))&&o.hasOwnProperty("$date")){var r=new Date(o.$date);o=r.toISOString().substring(0,10)}return o},onScroll:function(t){this.$.scrcols.scrollLeft=this.$.colcontscroll.scrollLeft,t.preventDefault()},containerScroll:function(t){var e=document.querySelector("compare-page::shadow .columns"),o=e.getBoundingClientRect().top,r=document.querySelectorAll("compare-page::shadow .column");if(o<=50){r.forEach(function(t){t.querySelector(".ipTitle").style.marginTop=50-o+"px",t.querySelector(".propNames").style.marginTop=o-50+"px"});var a=e.querySelector("#colcontscroll"),n=r[0].querySelector(".ipTitle"),l=a.offsetHeight-a.clientHeight;a.style.top=n.clientHeight+50-o-l+"px"}if(o>50){r.forEach(function(t){t.querySelector(".ipTitle").style.marginTop=0,t.querySelector(".propNames").style.marginTop=0});var c=e.querySelector("#colcontscroll"),i=getComputedStyle(r[0].querySelector(".ipTitle")).height,s=c.offsetHeight-c.clientHeight;c.style.top=parseInt(i)-s+"px"}},test:function(t){console.dir(t)},dragStart:function(t){this.moveItem=t.target,t.dataTransfer.effectAllowed="copy",t.dataTransfer.setData("text/html",t.target)},dragEnter:function(t){t.target.classList.contains("column")&&(console.log("enter"),t.target.style.opacity=.4,t.preventDefault())},dragExit:function(t){t.target.classList.contains("column")&&(console.log("exit"),t.target.style.opacity=1),t.preventDefault(),t.stopPropagation()},dragDown:function(t){this.moveItem.style.opacity=1,console.log("down")},dragStop:function(t){console.log("drop",t.target.parentNode.parentNode.dataArg);for(var e=t.target;!e.classList.contains("column");)e=e.parentNode;var o=e.dataArg,r=this.moveItem.dataArg,a=this.oarray[r];console.log(o,r);var n=this.oarray;n.splice(this.moveItem.dataArg,1),n.splice(o,0,a),this.oarray=[],this.oarray=n},allowDrop:function(t){t.preventDefault()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
